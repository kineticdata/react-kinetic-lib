(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"./src/components/form/defaults/Components.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return r});var o=t("./node_modules/docz-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),s=(t("./node_modules/docz/dist/index.esm.js"),t("./src/components/form/Field.js"),{}),p="wrapper";function r(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)(p,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"default-form-components"},"Default Form Components"),Object(a.b)("p",null,"The following components are simply default components and cannot be imported.\nThese are examples of components that you can override."),Object(a.b)("p",null,"All fields receive the same props which are documented on the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/react-kinetic-lib/form#field-props"}),"Form Page"),"."),Object(a.b)("h2",{id:"attributes"},"Attributes"),Object(a.b)("p",null,"The Default Attributes Field rendered when a field type is ",Object(a.b)("inlineCode",{parentName:"p"},"attributes")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"static",static:!0}),"import React, { Component, Fragment } from 'react';\nimport { List, Map, Repeat } from 'immutable';\n\nexport class AttributesField extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { added: List(), adding: '' };\n  }\n\n  // returns the number of attribute values that were previously set\n  countPrevious = name =>\n    this.props.value.get(name).size - this.countAdded(name);\n\n  // returns the number of attribute values that have been added\n  countAdded = name => this.state.added.filter(n => n === name).size;\n\n  onRemove = (name, index) => () => {\n    const addedIndex = index - this.countPrevious(name);\n    if (addedIndex >= 0) {\n      this.setState(state => ({\n        added: filterWithOccurrences(\n          state.added,\n          (n, i) => n !== name || i !== addedIndex,\n        ),\n      }));\n    }\n    this.props.onChange(this.props.value.deleteIn([name, index]));\n  };\n\n  onInputChange = (name, index) => event => {\n    const value = event.target.value;\n    if (!this.props.value.hasIn([name, index])) {\n      this.setState(state => ({\n        added: state.added.push(state.adding),\n        adding: '',\n      }));\n    }\n    this.props.onChange(\n      this.props.value.update(name, List(), values => values.set(index, value)),\n    );\n  };\n\n  onSelectChange = event => {\n    this.setState({ adding: event.target.value });\n  };\n\n  render() {\n    const attributes = mapWithOccurrences(\n      this.props.value\n        .keySeq()\n        .sort()\n        .flatMap(name => Repeat(name, this.countPrevious(name)))\n        .concat(this.state.added.push(this.state.adding)),\n      (name, index) => ({\n        name,\n        index,\n        value: this.props.value.getIn([name, index], ''),\n      }),\n    );\n    return (\n      this.props.visible && (\n        <Fragment>\n          <h5>{this.props.label}</h5>\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {attributes.size === 1 && this.props.placeholder && (\n                <tr>\n                  <td colSpan={3}>\n                    <em>{this.props.placeholder}</em>\n                  </td>\n                </tr>\n              )}\n              {attributes.map(({ name, value, index }, i) => (\n                <tr key={i}>\n                  <td>\n                    {i < attributes.size - 1 ? (\n                      name\n                    ) : (\n                      <select onChange={this.onSelectChange} value={name}>\n                        <option hidden />\n                        {availableAttributes(\n                          this.props.options,\n                          this.props.value,\n                        ).map(option => (\n                          <option key={option} value={option}>\n                            {option}\n                          </option>\n                        ))}\n                      </select>\n                    )}\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={value}\n                      onFocus={this.props.onFocus}\n                      onBlur={this.props.onBlur}\n                      onChange={this.onInputChange(name, index)}\n                    />\n                  </td>\n                  <td>\n                    {i < attributes.size - 1 && (\n                      <button\n                        type=\"button\"\n                        onFocus={this.props.onFocus}\n                        onBlur={this.props.onBlur}\n                        onClick={this.onRemove(name, index)}\n                      >\n                        &times;\n                      </button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </Fragment>\n      )\n    );\n  }\n}\n\n// Helper function that maps for a List but instead of providing the index in\n// the overall list, it gives the lambda the count of the occurrences of current\n// value that have already occurred in the list.\n// For example: ['red', 'green', ''red',]\n// Would call: ['red,' 0], ['green', 0], ['red', 1], ['blue', 0]\nconst mapWithOccurrences = (list, mapper) =>\n  list.reduce(\n    ([result, counts], current) => [\n      result.push(mapper(current, counts.get(current, 0))),\n      counts.update(current, 0, count => count + 1),\n    ],\n    [List(), Map()],\n  )[0];\n\n// Same idea as mapWithOccurrences above.\nconst filterWithOccurrences = (list, pred) =>\n  list.reduce(\n    ([result, counts], current) => [\n      pred(current, counts.get(current, 0)) ? result.push(current) : result,\n      counts.update(current, 0, count => count + 1),\n    ],\n    [List(), Map()],\n  )[0];\n\nconst availableAttributes = (options, value) =>\n  options\n    .filter(\n      option =>\n        option.get('allowsMultiple') ||\n        value.get(option.get('name'), List()).isEmpty(),\n    )\n    .map(option => option.get('name'));\n")),Object(a.b)("h2",{id:"checkbox"},"Checkbox"),Object(a.b)("p",null,"The Default Checkbox Field rendered when a field type is ",Object(a.b)("inlineCode",{parentName:"p"},"checkbox")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'export const CheckboxField = props =>\n  props.visible && (\n    <div className="field">\n      <input\n        type="checkbox"\n        id={props.id || props.name}\n        name={props.name}\n        checked={props.value || false}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      />\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n    </div>\n  );\n')),Object(a.b)("h2",{id:"password"},"Password"),Object(a.b)("p",null,"The Default Password Field rendered when a field type is ",Object(a.b)("inlineCode",{parentName:"p"},"password")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'export const PasswordField = props =>\n  props.visible && (\n    <div className="field">\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n      <input\n        type="password"\n        id={props.id || props.name}\n        name={props.name}\n        value={props.value || \'\'}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      />\n    </div>\n  );\n')),Object(a.b)("h2",{id:"radio"},"Radio"),Object(a.b)("p",null,"The Default Radio Field rendered when a field type is ",Object(a.b)("inlineCode",{parentName:"p"},"radio")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'export const RadioField = props =>\n  props.visible && (\n    <div className="field">\n      <legend>{props.label}</legend>\n      {props.options.map(option => (\n        <label key={option.value}>\n          <input\n            name={props.name}\n            type="radio"\n            value={option.value}\n            checked={props.value === option.value}\n            onChange={props.onChange}\n            onBlur={props.onBlur}\n            onFocus={props.onFocus}\n          />\n          {option.label}\n        </label>\n      ))}\n    </div>\n  );\n')),Object(a.b)("h2",{id:"select"},"Select"),Object(a.b)("p",null,"The Default Select Field rendered when a field type is ",Object(a.b)("inlineCode",{parentName:"p"},"select")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"export const SelectField = props =>\n  props.visible && (\n    <div className=\"field\">\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n      <select\n        id={props.id || props.name}\n        name={props.name}\n        value={props.value || ''}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      >\n        <option />\n        {props.options.map((option, i) => (\n          <option key={i} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n")),Object(a.b)("h2",{id:"team"},"Team"),Object(a.b)("p",null,"The Default Team Field rendered when a field type is ",Object(a.b)("inlineCode",{parentName:"p"},"team")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),"export const SelectField = props =>\n  props.visible && (\n    <div className=\"field\">\n      <label htmlFor={props.id || props.name}>{props.label}</label>\n      <select\n        id={props.id || props.name}\n        name={props.name}\n        value={props.value || ''}\n        onBlur={props.onBlur}\n        onChange={props.onChange}\n        onFocus={props.onFocus}\n      >\n        <option />\n        {props.options.map((option, i) => (\n          <option key={i} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n")))}r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/components/form/defaults/Components.mdx"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=components-form-defaults-components.2c91375bb467e12b7d5f.js.map